 public int[] asteroidCollision(int[] asteroids) {
        ArrayList < Integer > res = new ArrayList < > ();
		Stack < Integer > s = new Stack();
		for (int i = 0; i < asteroids.length; i++) {
			if (asteroids[i] > 0) {
				s.push(asteroids[i]);
                continue;
			} 

			while ((!s.isEmpty()) && (s.peek() < -(asteroids[i]))) {
				s.pop();
			}

			if (((!s.isEmpty()) && (s.peek() > Math.abs(asteroids[i])))) {
				continue;
			} 

			if ((!s.isEmpty()) && (asteroids[i] + s.peek() == 0)) {
				s.pop();
				continue;
			}

			if (asteroids[i] < 0) {
				res.add(asteroids[i]);
			}
		}

		res.addAll(s);
		int[] result = new int[res.size()];

		for (int j = 0; j < res.size(); j++) {
			result[j] = res.get(j);
		}
		return result;
    }




public int[] asteroidCollision(int[] asteroids) {
	if (asteroids.length < 2) {
	return asteroids;
	}

	int index = 1;
	int end =0;
	while (index < asteroids.length) {
		if(end==-1) {
			asteroids[0] = asteroids[index];
			end=0;
			index++;
			continue;
		} else {
			if (asteroids[end] > 0 && asteroids[index] < 0) {
				if (Math.abs(asteroids[end]) == Math.abs(asteroids[index])) {
					end--;
					index++;
				} else if (Math.abs(asteroids[end]) > Math.abs(asteroids[index])) {
					index++;
				} else {
					end--;
				}
			} else {
				end++;
				asteroids[end] = asteroids[index];
				index++;
			}

		}

	}
	
	return Arrays.copyOf(asteroids, end+1);
}